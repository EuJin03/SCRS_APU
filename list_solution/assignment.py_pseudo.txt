# Eugene Tin

# TP061195

# ASIA PACIFIC UNIVERSITY OF TECHNOLOGY AND INNOVATION

# GITHUB REPO https://github.com/EuJin03/SCRS_APU



# Chia Wen Xuen

# TP061184

# ASIA PACIFIC UNIVERSITY OF TECHNOLOGY AND INNOVATION



# Copyright (C) 2021 SCRS_APU Open Source Project 



# Licensed under the MIT License

# you may not use this file except IN compliance with the License.

# You may obtain a copy of the License at 

 

#       https://choosealicense.com/licenses/mit/

 

# Unless required by applicable law or agreed to IN writing, software 

# distributed under the License is distributed on an "AS IS" BASIS,

# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License FOR the specific language governing permissions and 

# limitations under the License.



# convention

# 1. RETURN multiple statements using list

# 2. double quotes FOR str

# 3. current_user variable holds logged IN user details

# 4. snake casing variables

# 5. store values IN the form of json data

# 6. convert datetime into str datatype

# 7. tabs preferred, default indentation=2  

# 8. four classes of function: util/users/vehicles/user_interface 

# 9. two data files: userlist/carlist



# admin credentials

# username: admin

# password: admin



# customer credentials

# username: wenxuen

# password: wenxuen



IMPORT os

IMPORT re

IMPORT datetime 

from datetime IMPORT timedelta

IMPORT json

IMPORT hashlib

SET clear TO lambda: os.system("cls")



# ---------------------------------------------------------------------------------

# UTILITIES FUNCTIONS

# ---------------------------------------------------------------------------------

DEFINE FUNCTION read_file(filename):

  # -------------------------

  # read txt files

  # -------------------------

  TRY:

    with open(filename) as f:

      SET data TO f.read()

    RETURN json.loads(data)

  EXCEPT:

    RETURN []



DEFINE FUNCTION write_file(filename, content):

  # -------------------------

  # write txt files

  # -------------------------

  with open(filename, "w") as f:

    f.write(json.dumps(content, indent=2, sort_keys=True, default=str))

    f.close()

  RETURN



DEFINE FUNCTION hash_password(password):

  # -------------------------

  # hash password

  # -------------------------

    RETURN hashlib.sha256(str.encode(password)).hexdigest()



DEFINE FUNCTION validation(username="*****", email="*****@mail.com", password="*****", confirm_password="*****"): 

  # -------------------------

  # user info validation

  # -------------------------

  SET userlist TO read_file("userlist.txt")



  # password

  IF len(password) < 5:

    RETURN [True, "Password length must be greater than 5"]



  # password

  IF password != confirm_password:

    RETURN [True, "Password do not match, please try again"]



  # username

  IF len(username) < 5:

    RETURN [True, "Username length must greater than 5"]



  # username

  FOR user IN userlist:

    IF user[0].lower() EQUALS username.lower():

      RETURN [True, "Username has been taken, please try again"]



  # email

  SET REGEX TO re.compile(r'[^@]+@[^@]+\.[^@]+')

  IF not REGEX.match(email):

    RETURN [True, "Email format is incorrect, please try again"]



  RETURN [False]



DEFINE FUNCTION user_INPUT():

  # -------------------------

  # user info

  # extend from register 

  # -------------------------

  clear()

  OUTPUT("REGISTRATION")

  OUTPUT("------------")



  # username

  WHILE True: 

    SET username TO INPUT("Username: ")



    SET validated_info TO validation(username=username)



    IF validated_info[0]:

    

      OUTPUT(validated_info[1])

      continue

    ELSE:

      break



  # email

  WHILE True: 

    SET email TO INPUT("Email: ")



    SET validated_info TO validation(email=email)



    IF validated_info[0]:

    

      OUTPUT(validated_info[1])

      continue

    ELSE:

      break



  # password

  WHILE True: 

    SET password TO INPUT("Password: ")

    SET confirm_password TO INPUT("Confirm Password: ")



    SET validated_info TO validation(password=password, confirm_password=confirm_password)



    IF validated_info[0]:

    

      OUTPUT(validated_info[1])

      continue

    ELSE:

      break



  clear()

  OUTPUT("----------------")

  OUTPUT("Personal Details")

  OUTPUT("----------------")



  # contact

  WHILE True: 

    SET contact TO INPUT("Contact Number: +6")



    IF not contact.isnumeric():

    

      OUTPUT("Contact number must contain numbers only...")

      continue

    ELSE:

      break



  WHILE True: 

    SET city TO INPUT("Currently lived IN [state]: ")



    IF len(city) < 4:

    

      OUTPUT("State not found, please try again...")

      continue

    ELSE:

      break



  WHILE True:

    OUTPUT("\nWould you like to make an initial deposit into your wallet?")

    OUTPUT("<Enter> to skip the deposit\n")



    SET wallet TO INPUT("Deposit amount: RM")



    IF wallet EQUALS "":

      SET wallet TO 0

      break

    ELSEIF not wallet.isnumeric():

    

      OUTPUT("Invalid amount")

    ELSE: 

      break

    

  RETURN [username.lower(), email, hash_password(password), "0" + contact, city, int(wallet), [], ""]



DEFINE FUNCTION field_control(field_text, type, wildcard=""):

  # -------------------------

  # INPUT field check with error handling

  # extend from add_car()

  # -------------------------

  WHILE True:

    SET field_INPUT TO INPUT(f"{field_text}")



    IF field_INPUT EQUALS "":

      RETURN wildcard



    SET # 0 TO str

    IF type EQUALS 0:

      IF len(field_INPUT) < 2:

        OUTPUT("Text unknown, please try again")

        continue

      ELSE:

        break

    

    SET # 1 TO int

    IF type EQUALS 1:

      IF field_INPUT EQUALS "" or not field_INPUT.isnumeric():

        OUTPUT("Please fill IN with numbers only...")

        continue

      ELSE:

        break





  RETURN field_INPUT



DEFINE FUNCTION rental_expire():

  # -------------------------

  # reset car availability status when expired

  # -------------------------

  SET carlist TO read_file("carlist.txt")



  FOR i IN range(len(carlist) - 1):

    SET car TO carlist[i]

    IF car[-2]:

      IF datetime.datetime.strptime(car[-1][3], "%Y-%m-%d %H:%M:%S.%f") < datetime.datetime.now():

        SET car[-1] TO False

        SET car[-2] TO False

        write_file("carlist.txt", carlist)       

        RETURN



# ---------------------------------------------------------------------------------

# USER FUNCTIONS

# ---------------------------------------------------------------------------------

DEFINE FUNCTION register():

  # -------------------------

  # Register

  # access: anyone

  # -------------------------

  clear()

  SET userlist TO read_file("userlist.txt")



  SET user_detail TO user_INPUT()

  userlist.append(user_detail)



  write_file("userlist.txt", userlist)



  clear()

  IF user_detail[-3] != 0:

    SET float_price TO "{:.2f}".format(user_detail[-3])

    OUTPUT(f"Total amount of RM{float_price} deposited into your account")

  OUTPUT("You have registered successfully, please login now...")



DEFINE FUNCTION login(username, password):

  # -------------------------

  # Login

  # access: anyone

  # -------------------------

  SET userlist TO read_file("userlist.txt")



  SET err TO True

  FOR user IN userlist:

    IF user[0] EQUALS username:

      IF user[2] EQUALS hash_password(password):

        SET err TO False

        clear()

        OUTPUT("You have login successfully")

        RETURN user



  IF err:

    clear()

    INPUT("Username or password is incorrect, please try again...\n\n <Enter> to RETURN back to main menu...")

    RETURN ""



DEFINE FUNCTION display_user(current_user):

  # -------------------------

  # Display user information to modify

  # access: logged IN users

  # -------------------------

  clear()

  SET username TO current_user[0][0]

  SET email TO current_user[0][1]

  SET contact TO "+6" + str(current_user[0][3])



  OUTPUT("Update Personal Information\n")

  OUTPUT(f"1. Username: [{username}]\n2. Email: [{email}]\n3. Contact Number: [{contact}]\n4. Password\n\n0. Go Back\n")

  SET detail TO INPUT("Which detail do you wish to update? ")

  clear()

  RETURN detail



DEFINE FUNCTION update_user(action, current_user):

  # -------------------------

  # Update user information

  # access: logged IN users

  # -------------------------

  IF not action.isnumeric() or action > "4":

    RETURN [False, "something went wrong", current_user[0]]



  IF action EQUALS "0":

    RETURN ""



  SET userlist TO read_file("userlist.txt")



  # update username

  WHILE action EQUALS "1":

    SET username TO INPUT("Enter new username: ")

    SET validated TO validation(username=username)

    

    IF validated[0]:

      clear()

      OUTPUT(validated[1])

    

    IF not validated[0]:

      FOR user IN userlist:

        IF user[0] EQUALS current_user[0][0]:

          SET user[0] TO username

          break

      write_file("userlist.txt", userlist)

      RETURN [False, "User info has been successfully updated!", user]



  # update email

  WHILE action EQUALS "2":

    SET email TO INPUT("Enter new email: ")

    SET validated TO validation(email=email)



    IF validated[0]:

      clear()

      OUTPUT(validated[1])



    IF not validated[0]:

      FOR user IN userlist:

        IF user[0] EQUALS current_user[0][0]:

          SET user[1] TO email

          break

      write_file("userlist.txt", userlist)

      RETURN [False, "User info has been successfully updated!", user]

          



  # update contact

  WHILE action EQUALS "3":

    SET contact TO INPUT("Enter new contact number: +6")



    IF not contact.isnumeric():

      clear()

      OUTPUT("Please insert correct information...")

      continue



    FOR user IN userlist:

      IF user[0] EQUALS current_user[0][0]:

        SET user[3] TO contact

        break

    write_file("userlist.txt", userlist)

    RETURN [False, "User info has been successfully updated!", user]

  

  # update password

  WHILE action EQUALS "4":

    SET err TO False

    clear()

    SET old TO INPUT("Enter old password: ")

    SET new_password TO INPUT("\nEnter new password: ")

    SET new_confirm TO INPUT("Confirm new password: ")



    SET validated TO validation(password=new_password, confirm_password=new_confirm)



    IF validated[0]:

      clear()

      OUTPUT(validated[1])

      continue



    FOR user IN userlist:

      IF user[0] EQUALS current_user[0][0]:

        IF user[2] != hash_password(old):

          SET err TO True

          clear()

          OUTPUT("Old password incorrect\n\n1. Retry\n0. Quit\n")

          SET choice TO INPUT("Choice: ")



          IF choice EQUALS "0":

            clear()

            RETURN [True, "Please try again later..."]



          IF choice EQUALS "1":

            continue



        IF not validated[0] and not err:

          SET user[2] TO hash_password(new_password)

          break



    write_file("userlist.txt", userlist)

    RETURN [True, "User info has been successfully updated, please login again..."]



DEFINE FUNCTION modify_wallet(current_user):

  # -------------------------

  # Deposit money into wallet

  # access: anyone

  # -------------------------

  clear()

  SET balance TO current_user[0][-3]

  SET decimal_balance TO "{:.2f}".format(balance)

  OUTPUT(f"Your total balance remaining: RM{decimal_balance}\n")

  OUTPUT("1. Add fund\n<Enter> to Quit\n")

  SET add_fund TO INPUT("Do you wish to add fund into your account? ")



  WHILE True:

    IF add_fund != "1":

      RETURN 0

  

    IF add_fund EQUALS "1":

      SET amount TO INPUT("Enter the amount you wished to deposit: RM")

      SET userlist TO read_file("userlist.txt")



      SET amount TO "{:.2f}".format(int(amount))



      FOR user IN userlist:

        IF user[0] EQUALS current_user[0][0]:

          SET user[5] TO float(user[5]) + float(amount)

          SET updated_user TO user

          break



      write_file("userlist.txt", userlist)

      SET current_user[0] TO updated_user

      clear()

      OUTPUT(f"Total fund of RM{amount} has been deposited")

      INPUT("<Enter> to RETURN...")

      break



DEFINE FUNCTION rent_car(id, current_user):

  # -------------------------

  # Book a car and payment

  # access: customer

  # -------------------------

  clear()

  SET carlist TO read_file("carlist.txt")

  SET userlist TO read_file("userlist.txt")



  FOR car IN carlist:

    IF car[0] EQUALS id:

      IF car[-2]:

        RETURN [True, "Car is already been taken by someone"]



      SET brand TO car[2].capitalize()

      SET model TO car[3].capitalize()

      SET year TO str(car[4])

      SET price TO "{:.2f}".format(car[8])



      OUTPUT(f"You have selected {brand} {model}, {year}")

      OUTPUT(f"Rental price FOR this product will be fixed at the rate of RM{price} per day\n")



      SET confirmation TO INPUT("Do you want to confirm order? [yes/No]: ")

      IF confirmation.lower() EQUALS "no":

        RETURN

      SET duration TO INPUT("How many days would you like to rent? ")



      WHILE confirmation.lower() EQUALS "yes":

        SET total_price TO float(price) * int(duration)



        FOR user IN userlist:

          IF user[0] EQUALS current_user[0][0]:

            IF user[5] < total_price:

              RETURN [True, "Insufficient balance, you are broke!"]

          

            SET username TO current_user[0][0]



            # update car to rented

            SET car[-2] TO True

            SET car[-1] TO [username, duration, datetime.datetime.now(), datetime.datetime.now() + timedelta(days=int(duration))]



            # update user rental history

            user[6].append(car)

            user[5] -= total_price



            write_file("carlist.txt", carlist)

            write_file("userlist.txt", userlist)

            SET current_user[0] TO user



            SET total_price TO "{:.2f}".format(total_price)

            

            OUTPUT(f"\nTotal payment made RM{total_price}")

            OUTPUT(f"Your booking order FOR {brand} {model}, {year} FOR the duration of {duration} days has been confirmed\nEnjoy your ride!")



            SET end TO INPUT("Press Enter to RETURN back to home page!")

            RETURN end

      break



# ---------------------------------------------------------------------------------

# CAR FUNCTIONS

# ---------------------------------------------------------------------------------

DEFINE FUNCTION display_brand():

  # -------------------------

  # Display car brand

  # access: anyone

  # -------------------------

  SET cars TO read_file("carlist.txt")

  SET brand TO [] # list of registered car brand



  # display car brand first

  FOR car IN cars: 

    brand.append(car[2])

  SET brand TO list(set(brand))



  WHILE True:

    SET count TO 1

    FOR i IN brand:

      OUTPUT(f"{count}. {i}")

      count+=1



    OUTPUT("\n0. Go back to home page")

    SET num TO INPUT("Select a model: ")



    IF num.isnumeric() and num < str(count):

      break



  RETURN [num, brand]



DEFINE FUNCTION car_details(brand, default=True):

  # -------------------------

  # Display car details from car brand selected

  # access: anyone

  # -------------------------

  clear()

  SET cars TO read_file("carlist.txt")

  SET car_model TO [] # display models from car brand



  IF default:

    FOR car IN cars:

      IF car[2] EQUALS brand:

        car_model.append(car)



  IF not default:

    FOR car IN cars:

      IF car[2] EQUALS brand:

        IF car[-2] EQUALS False:

          car_model.append(car)



  # display selected brand car model

  FOR i IN car_model:

    SET id TO i[0]

    SET num_plate TO i[1]

    SET brand TO i[2]

    SET model TO i[3]

    SET year TO i[4]

    SET owner TO i[5]

    SET condition TO i[6]

    SET desc TO i[7]

    SET price_rate TO i[8]

    SET seats TO i[9]

    SET availability TO i[10]

    SET rent_by TO i[11]



    SET float_price_rate TO "{:.2f}".format(price_rate)



    OUTPUT("-"*25)

    OUTPUT(f"ID: {id}")

    OUTPUT(f"Number Plate: {num_plate}")

    OUTPUT(f"Vehicle: {brand} {model}, {year}")

    OUTPUT(f"Total seats: {seats}")

    OUTPUT(f"Short Description: {desc}")

    OUTPUT(f"Owned by {owner}")

    OUTPUT(f"Condition: {condition}/10")

    OUTPUT(f"Price rate: RM{float_price_rate}/day")

    IF availability:

      OUTPUT(f"availability: No")

    IF not availability:

      OUTPUT(f"availability: Yes")

    IF rent_by:

      IF rent_by[0]:

        SET username TO rent_by[0]

        SET start_date TO rent_by[2]

        SET duration TO rent_by[1]

        SET str_date TO start_date[0:11]

        OUTPUT(f"currently rented by {username}\nRented since {str_date} FOR {duration} days")

    OUTPUT("-"*25)

    OUTPUT("\n")



  IF len(car_model) EQUALS 0:

    OUTPUT("Oops, nothing is here yet")



  car_model.clear()



DEFINE FUNCTION add_car():

  # -------------------------

  # Add car into file

  # access: admin

  # -------------------------

  clear()

  OUTPUT("-"*20)

  OUTPUT("SCRS Vehicle Management")

  OUTPUT("-"*20, "\n")



  SET num_plate TO field_control("Number Plate: ", 0)

  SET brand TO field_control("Vehicle Brand: ", 0)

  SET model TO field_control("Vehicle Model: ", 0)

  SET year TO field_control("Manufactured Year: ", 1)

  SET owner TO field_control("Owner of the vehicle: ", 0)

  SET condition TO field_control("Condition of the car [?]/10: ", 1)

  SET desc TO field_control("Short description: ", 0)

  SET price_rate TO field_control("Price rate per day: RM", 1)

  SET seats TO field_control("Number of seats: ", 1)



  SET carlist TO read_file("carlist.txt")



  SET latest_id TO 0



  FOR car IN carlist:

    IF car[0] > latest_id:

      SET latest_id TO car[0] + 1



  SET new_car TO [int(latest_id), num_plate, brand.capitalize(), model.capitalize(), int(year), owner.capitalize(), float(condition), desc, float(price_rate), int(seats), False, False]



  carlist.append(new_car)



  write_file("carlist.txt", carlist)

  SET detail TO INPUT("Car has been successfully added to the system... <Enter> to RETURN:")

  clear()

  RETURN detail



DEFINE FUNCTION modify_car(id):

  # -------------------------

  # Update car details 

  # extended from select car

  # access: admin

  # -------------------------

  clear()

  OUTPUT('Car model: ')

  SET carlist TO read_file("carlist.txt")



  FOR car IN carlist:

    IF car[0] EQUALS id:

      OUTPUT("Modify details of", car[2], car[3], ",", car[4])

      OUTPUT("Current number plate: ", car[1])

      OUTPUT("\n<Enter> to keep previous data...\n")



      SET num_plate TO field_control("Number Plate [" + car[1] + "]: ", 0, car[1])

      SET brand TO field_control("Vehicle Brand [" + car[2] + "]: ", 0, car[2])

      SET model TO field_control("Vehicle Model [" + car[3] + "]: ", 0, car[3])

      SET year TO field_control("Manufactured Year [" + str(car[4]) + "]: ", 1, car[4])

      SET owner TO field_control("Owner of the vehicle [" + car[5] + "]: ", 0, car[5])

      SET condition TO field_control("Condition of the car [" + str(car[6]) + "/10)" + ": ", 1, car[6])

      SET desc TO field_control("Short description: [" + car[7] + "]\n: ", 0, car[7])

      SET price_rate TO field_control("Price rate per day: [RM" + "{:.2f}".format(car[8]) + "]: ", 1, car[8])

      SET seats TO field_control("Number of seats [" + str(car[9]) + "]: ", 1, car[9])



      SET new_car TO [car[0], num_plate, brand, model, int(year), owner, float(condition), desc, float(price_rate), int(seats), car[10], car[11]]

      break



  FOR i IN range(len(carlist)):

    IF carlist[i][0] EQUALS id:

      del carlist[i]

      break



  carlist.append(new_car)

  write_file("carlist.txt", carlist)



  RETURN [True, "Car's details has been modified successfully"]



DEFINE FUNCTION select_car(callback):

  # -------------------------

  # Select a car to modify

  # access: admin

  # -------------------------

  clear()

  OUTPUT("-"*20)

  OUTPUT("SCRS Vehicle Management")

  OUTPUT("-"*20, "\n")



  SET action TO display_brand()



  IF action[0] EQUALS "0":

    clear()

    RETURN ""



  WHILE action[0] != "0":

    clear()

    SET payload TO int(action[0]) - 1

    car_details(brand=action[1][payload])

    SET vehicle_id TO INPUT("Select vehicle ID to modify or <Enter> to go back: ")



    WHILE len(vehicle_id) > 0:

      clear()

      SET status TO callback(int(vehicle_id))



      IF status[0]:

        OUTPUT(status[1])

        INPUT("<Enter> to RETURN back to main menu...")

        break



    IF vehicle_id EQUALS "":

      clear()

      break   



DEFINE FUNCTION rental_history(current_user):

  # -------------------------

  # View rental history

  # access: customer

  # -------------------------

  clear()

  SET userlist TO read_file("userlist.txt")



  FOR user IN userlist:

    IF user[0] EQUALS current_user[0][0]:

      IF len(user[-2]) EQUALS 0:

        OUTPUT("\nStart placing order today FOR exclusive discounts!\n")

        RETURN INPUT("<Enter> to RETURN back to home page...")



      FOR rent IN user[-2]:

        SET brand TO rent[2].capitalize()

        SET model TO rent[3].capitalize()

        SET year TO rent[4]

        SET price_rate TO rent[8]

        SET start_date TO rent[-1][2]

        SET end_date TO rent[-1][3]

        SET duration TO rent[-1][1]

        SET str_date TO start_date[0:11]

        SET str_enddate TO end_date[0:11]



        SET total_price TO "{:.2f}".format(float(price_rate) * int(duration))



        OUTPUT("-"*20)

        OUTPUT(f"\nBooked on {str_date} FOR the duration of {duration} days\n")

        OUTPUT(f"Ends by {str_enddate}\n")

        OUTPUT(f"Vehicle: {brand} {model}, {year}\n")

        OUTPUT(f"Total price deducted from wallet: -RM{total_price}\n")

        OUTPUT("-"*20, "\n")

      break



  SET end TO INPUT("<Enter> to RETURN back to home page...")

  clear()

  RETURN end



DEFINE FUNCTION rented_out():

  # -------------------------

  # View vehicles that are currently rented out

  # access: admin

  # -------------------------

  clear()



  OUTPUT("-"*25)

  OUTPUT("CARS ON TRANSIT RECORDS")

  OUTPUT("-"*25, "\n")



  SET carlist TO read_file("carlist.txt")



  FOR car IN carlist:

    IF car[-2]:

      IF len(car[-1]) > 0:

        SET booking_details TO car[-1]

        SET num_plate TO car[1].upper()

        SET brand TO car[2]

        SET model TO car[3]

        SET year TO str(car[4])

        SET owner TO car[5]

        SET condition TO str(car[6])

        SET desc TO car[7]

        SET price_rate TO car[8]

        SET start_date TO booking_details[2]

        SET str_date TO start_date[0:11]

        SET end_date TO booking_details[3]

        SET str_enddate TO end_date[0:11]

        SET username TO booking_details[0]

        SET duration TO booking_details[1]



        SET total_price TO "{:.2f}".format(int(duration) * float(price_rate))



        OUTPUT("-"*20)

        OUTPUT(f"Booked on {str_date} FOR the duration of {duration} days\n")

        OUTPUT(f"Ends by {str_enddate}\n")

        OUTPUT(f"Vehicle: {brand} {model}, {year}")

        OUTPUT(f"Plate number: {num_plate}, owned by {owner}\n")

        OUTPUT(f"Condition: {condition}/10")

        OUTPUT(f"Description: {desc}\n")

        OUTPUT(f"Total price deducted from wallet: -RM{total_price}\n")

        OUTPUT(f"Rented by {username}")

        OUTPUT("-"*20, "\n")



  SET end TO INPUT("<Enter> to go back...")

  clear()

  RETURN end



DEFINE FUNCTION rent_available():

  # -------------------------

  # View vehicles that are available FOR rent

  # access: admin

  # -------------------------  

  clear()

  OUTPUT("-"*20)

  OUTPUT("SCRS Vehicle Management")

  OUTPUT("-"*20, "\n")



  SET action TO display_brand()



  IF action[0] EQUALS "0":

    clear()

    RETURN ""

    

  WHILE action[0] != "0":

    SET payload TO int(action[0]) - 1

    car_details(action[1][payload], False)

    INPUT("Press Enter to quit: ")

    clear()

    break   



DEFINE FUNCTION customer_payment():

  # -------------------------

  # View customer bookings and payments

  # access: admin

  # -------------------------

  clear()

  OUTPUT("-"*20)

  OUTPUT("SCRS Customer Order Record")

  OUTPUT("-"*20, "\n")



  SET userlist TO read_file("userlist.txt")



  FOR user IN userlist:

    IF len(user[-2]) > 0:

      SET username TO user[0]

      SET email TO user[1]

      SET total_spent TO 0



      OUTPUT("-"*15)

      OUTPUT(f"Username: {username}")

      OUTPUT(f"Email: {email}")

      OUTPUT("-"*15, "\n")



      FOR data IN user[-2]:

        SET start_date TO data[-1][2][0:11]

        SET end_date TO data[-1][3][0:11]

        SET duration TO data[-1][1]

        SET vehicle TO f"{data[2]} {data[3]}, {data[4]}"

        SET price_per_order TO "{:.2f}".format(data[8] * int(duration))

        OUTPUT(f"{vehicle}")

        OUTPUT(f"Order booked on {start_date}for {duration} days")

        OUTPUT(f"Total spent: RM{price_per_order}")

        OUTPUT(f"Expire on {end_date}\n")



        total_spent += float(price_per_order)

        

      SET str_spent TO "{:.2f}".format(total_spent)

      OUTPUT(f"Total amount earned: {str_spent}\n")



  SET end TO INPUT("<Enter> to go back...")

  clear()

  RETURN end



DEFINE FUNCTION customer_query():

  SET userlist TO read_file("userlist.txt")



  SET usernames TO [] # list of registered usernames 



  # display usernames

  FOR user IN userlist: 

    usernames.append(user[0])

  SET usernames TO list(set(usernames))



  OUTPUT(f"Search by usernames:\n")

  SET count TO 0

  FOR names IN usernames:

    OUTPUT(f"{count}. {names}")

    count+=1



  OUTPUT("<Enter> to RETURN")

  SET selected_username TO INPUT("\nSelect an user by listed numbers or type the username: ")



  # RETURN

  IF selected_username EQUALS "":

    RETURN selected_username



  # error handling

  IF selected_username.isnumeric():

    IF float(selected_username) >= len(usernames) or int(selected_username) < 0:

      OUTPUT("Username does not exist...")

      SET end TO INPUT("<Enter> to RETURN")

      clear()

      RETURN end



  # error handling 2

  IF not selected_username.isnumeric() and not selected_username.lower() IN usernames:

      OUTPUT("Username does not exist...")

      SET end TO INPUT("<Enter> to RETURN")

      clear()

      RETURN end



  WHILE True:

    clear()

    IF selected_username.isnumeric():

      FOR user IN userlist:

        IF user[0] EQUALS usernames[int(selected_username)]:

          SET username TO user[0]

          SET email TO user[1]

          OUTPUT("-"*15)

          OUTPUT(f"Username: {username}")

          OUTPUT(f"Email: {email}")

          OUTPUT("-"*15, "\n")

          IF len(user[-2]) > 0:

            FOR record IN user[-2]:

              SET start_date TO record[-1][2][0:11]

              SET end_date TO record[-1][3][0:11]

              SET duration TO record[-1][1]

              SET vehicle TO f"{record[2]} {record[3]}, {record[4]}"

              SET num_plate TO record[-1][0].upper()

              SET price_per_order TO "{:.2f}".format(record[8] * int(duration))

              OUTPUT(f"Number plate: {num_plate}")

              OUTPUT(f"{vehicle}")

              OUTPUT(f"Order booked on {start_date}for {duration} days")

              OUTPUT(f"Total spent: RM{price_per_order}")

              OUTPUT(f"Expire on {end_date}\n")

      

    # query by username

    IF len(selected_username) > 1:

        FOR user IN userlist:

          IF user[0].lower() EQUALS selected_username.lower():

            SET username TO user[0]

            SET email TO user[1]

            OUTPUT("-"*15)

            OUTPUT(f"Username: {username}")

            OUTPUT(f"Email: {email}")

            OUTPUT("-"*15, "\n")

            IF len(user[-2]) > 0:

              FOR record IN user[-2]:

                SET start_date TO record[-1][2][0:11]

                SET end_date TO record[-1][3][0:11]

                SET duration TO record[-1][1]

                SET vehicle TO f"{record[2]} {record[3]}, {record[4]}"

                SET num_plate TO record[-1][0].upper()

                SET price_per_order TO "{:.2f}".format(record[8] * int(duration))

                OUTPUT(f"Number plate: {num_plate}")

                OUTPUT(f"{vehicle}")

                OUTPUT(f"Order booked on {start_date}for {duration} days")

                OUTPUT(f"Total spent: RM{price_per_order}")

                OUTPUT(f"Expire on {end_date}\n")



    SET end TO INPUT("<Enter> to RETURN")

    clear()

    RETURN end



# ---------------------------------------------------------------------------------

# USER INTERFACE

# ---------------------------------------------------------------------------------

DEFINE FUNCTION main():

  SET current_user TO []

  clear()

  OUTPUT('-'*20)

  OUTPUT('Super Car Rental Service (SCRS)')

  OUTPUT('-'*20)



  # main page without login

  WHILE len(current_user) EQUALS 0:

    OUTPUT('\n1. Login\n2. Register\n3. View Cars\n0. Quit')

    SET option TO INPUT('Please select a choice: ')



    WHILE option EQUALS "3":

      clear()

      SET action TO display_brand()



      IF action[0] EQUALS "0":

        clear()

        break



      WHILE action[0] != "0":

        SET payload TO int(action[0]) - 1

        car_details(brand=action[1][payload])

        INPUT("Press Enter to quit: ")

        clear()

        break       



    IF option EQUALS "2":

      register()



    IF option EQUALS "1":

      clear()

      OUTPUT("LOGIN\n")

      SET username TO INPUT("Username: ")

      SET password TO INPUT("Password: ")



      SET login_user TO login(username, password)



      IF login_user EQUALS "":

        main()



      current_user.append(login_user)

      

    IF option EQUALS "0":

      break



  # admin interface

  WHILE len(current_user) > 0 and current_user[0][-1].lower() EQUALS "admin":

    clear()

    OUTPUT("Welcome ", current_user[0][0].capitalize(), "\n")

    OUTPUT("1. Add a Vehicle\n2. Modify a Vehicle\'s Details\n3. Update Personal Information\n4. Vehicle Rental Records\n5. Query Customer Record\n\n0. Logout\n")

    SET admin_option TO INPUT("Please enter your choice: ")



    # customer record query 

    WHILE admin_option EQUALS "5":

      clear()

      OUTPUT("-"*20)

      OUTPUT("SCRS Customer Records Management")

      OUTPUT("-"*20, "\n")



      SET end TO customer_query()



      IF end EQUALS "":

        break



    # rental records

    WHILE admin_option EQUALS "4":

      clear()

      OUTPUT("-"*20)

      OUTPUT("SCRS Vehicle Management")

      OUTPUT("-"*20, "\n")



      OUTPUT("1. Vehicles IN transit\n2. Vehicles available FOR Rent\n3. Customer Payments FOR a specific time duration\n\n0.Back\n")

      SET record_option TO INPUT("Please enter your choice: ")      



      # RETURN

      IF record_option EQUALS "0":

        break



      # cars booked

      WHILE record_option EQUALS "1":

        clear()

        SET end TO rented_out()



        IF end EQUALS "":

          clear()

          break     



      # cars available

      WHILE record_option EQUALS "2":

        clear()

        SET end TO rent_available()

        

        IF end EQUALS "":

          break 



      # customer payments

      WHILE record_option EQUALS "3":

        clear()

        SET end TO customer_payment()



        IF end EQUALS "":

          break



    # update personal info

    WHILE admin_option EQUALS "3":

      SET action TO display_user(current_user)

      SET payload TO update_user(action, current_user)



      IF payload EQUALS "":

        break



      IF payload[0]:

        OUTPUT(payload[1])

        INPUT("<Enter> to continue")

        SET current_user[0] TO []

        main()

      

      IF not payload[0]:

        OUTPUT(payload[1])

        SET current_user[0] TO payload[2]

        SET choice TO INPUT("<Enter> to continue...")

        break



    # modify vehicle

    WHILE admin_option EQUALS "2":

      SET data TO select_car(modify_car)



      IF data EQUALS "":

        break



    # add vehicle

    WHILE admin_option EQUALS "1":

      SET data TO add_car()



      IF data EQUALS "":

        break



    # quit

    IF admin_option EQUALS "0":

      current_user.clear()

      main() 

      break  



  # customer interface

  WHILE len(current_user) > 0 and current_user[0][-1].lower() != "admin":

    clear()

    OUTPUT("Welcome", current_user[0][0].capitalize(), "\n")

    OUTPUT('1. Rent a Car\n2. Update Personal Information\n3. Rental History\n4. Check Wallet\n\n0. Logout\n')

    SET user_option TO INPUT("Please enter your choice: ")



    # check wallet

    WHILE user_option EQUALS "4":

      SET end TO modify_wallet(current_user)



      IF end EQUALS 0:

        break 



    # rental history

    WHILE user_option EQUALS "3":

      SET end TO rental_history(current_user)



      IF end EQUALS "":

        break



    # update personal info

    WHILE user_option EQUALS "2":

      SET action TO display_user(current_user)

      SET payload TO update_user(action, current_user)



      IF payload EQUALS "":

        break   



      IF payload[0]:

        OUTPUT(payload[1])

        INPUT("<Enter> to continue")

        SET current_user[0] TO []

        main()

      

      IF not payload[0]:

        OUTPUT(payload[1])

        SET current_user[0] TO payload[2]

        SET choice TO INPUT("<Enter> to continue...")

        break

     

      IF choice:

        break

    



    # rent car

    WHILE user_option EQUALS "1":

      clear()

      SET action TO display_brand()



      IF action[0] EQUALS "0":

        clear()

        break



      WHILE action[0] != "0":

        clear()

        SET payload TO int(action[0]) - 1

        car_details(brand=action[1][payload])

        SET vehicle_id TO INPUT("Select vehicle ID to rent or <Enter> to go back: ")



        WHILE len(vehicle_id) > 0:

          clear()

          SET status TO rent_car(int(vehicle_id), current_user)



          IF status EQUALS "":

            break



          TRY:

            IF status[0]:

              OUTPUT(status[1])   

              SET retry TO INPUT("Please select other car available FOR rent. <Enter> to continue")

              IF retry EQUALS "":

                clear()

                break

          EXCEPT:

            RETURN 



        IF vehicle_id EQUALS "":

          clear()

          break   



    IF user_option EQUALS "0":

      current_user.clear()

      main() 

      break         



# ---------------------------------------------------------------------------------

rental_expire() # RETURN car

main()

